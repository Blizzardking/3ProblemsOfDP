Discord Problem
[discord.txt]

Split into k sets to minimize discord
-------------------------------------
N political delegates from two parties, Daredevils (D) and Razorbacks (R) 
arrive at a conference to make decisions on K issues.  Each issue is
decided by creating a panel of delegates and they will debate the
issue and vote on it.  You have the task of forming these K panels
satisfying the following conditions:

1. N is at least 20 and at most 10000.  K is less than N/4.  
   Each panel must contain at least (2N)/(3K) delegates (rounded up) and
   at most (4N)/(3K) delegates (rounded down)

2. The delegates have received a number upon arrival, ordering them as
   per their arrival time.  The panels must be formed with the
   condition that no delegate can sit on a smaller numbered panel than
   a delegate who arrived earlier than him/her.  In other words, the
   first n_1 delegates (by arrival order) are assigned to panel 1, the
   next n_2 delegates to panel 2, and so on, where the sizes
   n_1,n_2,... have to satisfy condition 1 above.

3. Ideally, each panel should be balanced between the two parties, by
   having roughly the same number of delegates from each.  For panel i, 
   we define discord(i) to be the difference between the number of D
   delegates in it and the number of R delegates in it.  Note that
   discord(i) is always a nonnegative number.  It is not always
   possible to have discord(i)=0 for all i=1..K.  Find a way to
   seat the delegates in panels satisfying above conditions that
   minimizes the sum of squares of discords in all panels.

Input specification:
A sequence of problems is given.  Each problem in the sequence is as
follows.  The first line of input has 2 integers, N and K respectively.
The second line of input has N characters identifying the party of the
delegates (D or R), in the order of their arrival.  An input with N=0
signals the end.  Assume that N is between 20 and 10000, and K is less
than N/4.

Output:
One line with K integers each.  The first integer in the output is the
value of the objective being minimized.  The remaining K-1 integers
are the sizes of the first K-1 panels.

Sample input:
20 3
RRRDDDRRRRDDDDRDRRDD
20 5
RRRDDDRRRRDDDDRDRRDD
0 0

Sample output:
0 6 8
4 5 3 4 3


In the output, the panels in the first solution correspond to
RRRDDD RRRRDDDD RDRRDD, and the panels in the second solution
correspond to RRRDD DRR RRDD DDR DRRDD.


2.Weight Problem
[weights.txt]

A vendor has a balance (scales) and a number of different weights (stones).
He wants to know how many different weights he can measure with his stones. 
For example, if his stones weigh 100, 100, and 250 grams respectively, then
he can measure the following quantities using his balance:
50, 100, 150, 200, 250, 350, 450 grams.  Here, he measures 150 grams
by placing the 250 gram stone on one side and a 100 gram stone on the
other side.  The problem is to find out the number of distinct weights
that can be measured with a given set of stones.

Input:
The first line of input has N, the number of stones.
The next line contains N integers, giving the weights of the stones.
The weights are not ordered, and it is possible that there are
multiple stones with the same weight.
A batch has several inputs, and N=0 signals the end of the input.
Assume that N is at most 100, and the weights are multiples of 50,
and no weight is more than 2000.

Output:
For each input ptoblem, the output has just one integer, the number of
different weights that can be measured with the stones.

Sample input:
3
100 100 250
4
100 1000 200 100
0

Output for sample input:
7
13



3. Prul Problem

Trade on Verweggistan 
Since the days of Peter Stuyvesant and Abel Tasman, Dutch merchants have been traveling all over the 
world to buy and sell goods. Once there was some trade on Verweggistan, but it ended after a short 
time. After reading this story you will understand why. 
At that time Verweggistan was quite popular, because it was the only place in the world where people 
knew how to make a 'prul'. The end of the trade on Verweggistan meant the end of the trade in pruls (or 
'prullen', as the Dutch plural said), and very few people nowadays know what a prul actually is. 
Pruls were manufactured in workyards. Whenever a prul was finished it was packed in a box, which 
was then placed on top of the pile of previously produced pruls. On the side of each box the price was 
written. The price depended on the time it took to manufacture the prul. If all went well, a prul would 
cost one or two florins, but on a bad day the price could easily rise to 15 florins or more. This had 
nothing to do with quality; all pruls had the same value. 
In those days pruls sold for 10 florins each in Holland. Transportation costs were negligible since the 
pruls were taken as extra on ships that would sail anyway. When a Dutch merchant went to 
Verweggistan, he had a clear purpose: buy pruls, sell them in Holland, and maximize his profits. 
Unfortunately, the Verweggistan way of trading pruls made this more complicated than one would 
think. 
One would expect that merchants would simply buy the cheapest pruls, and the pruls that cost more 
than 10 florins would remain unsold. Unfortunately, all workyards on Verweggistan sold their pruls in a 
particular order. The box on top of the pile was sold first, then the second one from the top, and so on. 
So even if the fifth box from the top was the cheapest one, a merchant would have to buy the other four 
boxes above to obtain it. 
As you can imagine, this made it quite difficult for the merchants to maximize their profits by buying 
the right set of pruls. Not having computers to help with optimization, they quickly lost interest in 
trading pruls at all. 
In this problem, you are given the description of several workyard piles. You have to calculate the 
maximum profit a merchant can obtain by buying pruls from the piles according to the restrictions 
given above. In addition, you have to determine the number of pruls he has to buy to achieve this profit. 
Input
The input describes several test cases. The first line of input for each test case contains a single integer 
w, the number of workyards in the test case (1 <= w <= 50). 
This is followed by w lines, each describing a pile of pruls. The first number in each line is the number 
b of boxes in the pile (0 <= b <= 20). Following it are b positive integers, indicating the prices (in 
florins) of the pruls in the stack, given from top to bottom. 
The input is terminated by a description starting with w = 0. This description should not be processed. 
Output
For each test case, print the case number (1, 2, ...). Then print two lines, the first containing the 
maximum profit the merchant can achieve. The second line should specify the number of pruls the 
merchant has to buy to obtain this profit. If this number is not uniquely determined, print the possible 
values in increasing order. If there are more than ten possible values, print only the 10 smallest. Display a blank line between test cases. 
Sample Input
1
6 12 3 10 7 16 5
2
5 7 3 11 9 10
9 1 2 3 4 10 16 10 4 16
0
Output for the Sample Input
Problem 1
Maximum profit is 8.
Number of pruls to buy: 4
Problem 2
Maximum profit is 40.
Number of pruls to buy: 6 7 8 9 10 12 13
